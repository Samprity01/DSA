Rotten Oranges
Difficulty: MediumAccuracy: 46.02%Submissions: 146K+Points: 4
Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
 

Example 1:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.



class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        queue<pair<int,int>> q;
        
        int r=grid.size();
        int c=grid[0].size();
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
            
        }
        
        int count=0;
        q.push({-1,-1});
        
        while(!q.empty()){
            int x=q.front().first;
            int y=q.front().second;
            
            if((x==-1 and y==-1) and q.size()==1){
              q.pop();
              break;
        }
        
        else if((x==-1 and y==-1) and q.size()>1){
            count++;
            q.pop();
            q.push({-1,-1});
            
        }
        
        else{
            if(x-1>=0 and grid[x-1][y]==1){
                q.push({x-1,y});
                grid[x-1][y]=2;
            }
            
            if(y-1>=0 and grid[x][y-1]==1){
                q.push({x,y-1});
                grid[x][y-1]=2;
            }
            
            if(x+1<r and grid[x+1][y]==1){
                q.push({x+1,y});
                grid[x+1][y]=2;
            }
            
            if(y+1<c and grid[x][y+1]==1){
                q.push({x,y+1});
                grid[x][y+1]=2;
            }
            q.pop();
        }
        }
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==1)
                   return -1;
            }
        }
        return count;
    }
};
