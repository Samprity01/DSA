Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

 

Example 1:

Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6



vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
                                                 
   dequeue<long long int> dq;
   vector<long long > ans;
   
   for(int i=0;i<k;i++){
       if(A[i]<0){
           dq.push_back(i);
       }
   }
   if(dq.size()>0){
     ans.push_back(A[dq.front()]);
   }
   else{
       ans.push_back(0);
   }
   
   for(int i=k;i<N;i++){
       if(!dq.empty() && i-dq.front()>=k){
           dq.pop_front();
       }
       if(A[i]<0){
           dq.push_back(i);
       }
       if(dq.size()>0){
           ans.push_back(A[dq.front()]);
       }
       else{
           ans.push_back(0);
       }
   }
   return ans;
   
                                                 
 }
