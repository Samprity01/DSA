Given an integer array arr, return all the unique pairs [arr[i], arr[j]] such that i != j and arr[i] + arr[j] == 0.

Note: The pairs must be returned in sorted order, the solution array should also be sorted, and the answer must not contain any duplicate pairs.

Examples:

Input: arr = [-1, 0, 1, 2, -1, -4]
Output: [[-1, 1]]
Explanation: arr[0] + arr[2] = (-1)+ 1 = 0.
arr[2] + arr[4] = 1 + (-1) = 0.
The distinct triplets are [-1,1].




class Solution {
  public:
    vector<vector<int>> getPairs(vector<int>& arr) {
        // code here
        
       int n=arr.size();
       
       vector<vector<int>> ans;
        for(int i = 0; i < n-1; i++) {
            int j;
            for(j = i+1; j < n; j++) {
                if(i!=j && (arr[i] + arr[j] == 0) ) {
                    ans.push_back(arr[i]);
                    ans.push_back(arr[j]);
                }
            }
        }
        
       return ans;
    }
};
