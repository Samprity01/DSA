Middle of a Linked List
Difficulty: EasyAccuracy: 57.93%Submissions: 320K+Points: 2
Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.

Examples:

Input: Linked list: 1->2->3->4->5
Output: 3

Explanation: The given linked list is 1->2->3->4->5 and its middle is 3.


class Solution {
  public:
    /* Should return data of middle node. If linked list is empty, then -1 */
    
    int num(Node* head){
        int n=0;
        Node* ptr=head;
        while(ptr!=NULL){
            n++;
            ptr=ptr->next;
        }
        return n;
    }
    
    
    int getMiddle(Node* head) {
        // code here
        int n=num(head)/2+1;
        Node* newnode=head;
        
        for(int i=1;i<n-1  && newnode->next!=NULL;i++){
            newnode=newnode->next;
        }
        
        return newnode->next->data;
    }
};
