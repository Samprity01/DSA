Merge two sorted linked lists
Difficulty: MediumAccuracy: 62.91%Submissions: 155K+Points: 4
Given two sorted linked lists consisting of nodes respectively. The task is to merge both lists and return the head of the merged list.

Examples:

Input: LinkedList1: 5->10->15->40, ListedList2: 2->3->20
Output: 2->3->5->10->15->20->40
Explanation:


class Solution {
  public:
    Node* sortedMerge(Node* head1, Node* head2) {
        // code here
        
        if(head1==NULL && head2==NULL)
           return NULL;
        if(head1==NULL)return head2;
        if(head2==NULL)return head1;
        Node* temp1=head1;
        Node* temp2=head2;
        Node* prev1=NULL;
        Node* prev2=NULL;
        while(temp1!=NULL || temp2!=NULL){
            if(temp1!=NULL && temp2!=NULL){
                if(temp1->data<=temp2->data){
                    while(temp1!=NULL && temp1->data<=temp2->data){
                        prev1=temp1;
                        temp1=temp1->next;    
                    }
                    if(prev1!=NULL)prev1->next=temp2;
                }else{
                    while(temp2!=NULL && temp2->data<temp1->data){
                        prev2=temp2;
                        temp2=temp2->next;   
                    }
                    if(prev2!=NULL)prev2->next=temp1;
                }
            }else{
                break;
            }
        }
        if(head1->data<=head2->data)return head1;
        return head2;
    }



};
