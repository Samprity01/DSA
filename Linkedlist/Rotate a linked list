Rotate a Linked List
Difficulty: MediumAccuracy: 39.95%Submissions: 246K+Points: 4
Given the head of a singly linked list, the task is to rotate the linked list anti-clockwise by k nodes, i.e., left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

Examples:

Input: linkedlist: 2->4->7->8->9 , k = 3
Output: 8->9->2->4->7
Explanation:
Rotate 1: 4 -> 7 -> 8 -> 9 -> 2
Rotate 2: 7 -> 8 -> 9 -> 2 -> 4
Rotate 3: 8 -> 9 -> 2 -> 4 -> 7



class Solution {
  public:
    // Function to rotate a linked list.
    Node* rotate(Node* head, int k) {
        // Your code here
        int length=1;
        Node* tail=head;
        while(tail->next!=NULL){
            tail=tail->next;
            length++;
            
        }
        tail->next=head;
        int count=0;
        while(count<k)
        {
            tail=tail->next;
            head=head->next;
            count++;
        }
        tail->next=NULL;
        return head;
    }
};
